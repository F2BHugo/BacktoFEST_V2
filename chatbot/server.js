const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const { OpenAI } = require('openai');
const axios = require('axios');
const { getJson } = require('serpapi');


dotenv.config();
const app = express();

app.use(cors());
app.use(express.json());
app.use(express.static('public'));

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const userHistories = {};

function findFestivalMatch(userMessage, records) {
  const lowerMessage = userMessage.toLowerCase();
  return records.find(record =>
    record.fields.Nom && lowerMessage.includes(record.fields.Nom.toLowerCase())
  );
}

function isFestivalRelated(message) {
  const keywords = [
    "festival", "√©v√©nement", "musique", "concert", "programmation", "line-up",
    "spectacle", "billet", "tarif", "pass", "soir√©e", "artiste", "techno", "rock",
    "jazz", "electro", "pop", "classique", "cin√©ma", "sc√®ne", "live", "foire",
    "salon", "open air", "√©v√©nement culturel", "weekend festif",
    "s√©jour", "voyage", "pack", "package", "circuit", "formule", "tout compris",
    "transport", "vol", "train", "bus", "navette", "logement", "h√¥tel", "Airbnb",
    "h√©bergement", "prix", "tarif", "devis", "budget", "activit√©", "autour",
    "festival", "event", "music", "concert", "line-up", "line-up",
  "show", "ticket", "price", "pass", "party", "artist", "techno", "rock",
  "jazz", "electro", "pop", "classical", "cinema", "stage", "live", "fair",
  "expo", "open air", "cultural event", "festive weekend",
  "stay", "trip", "pack", "package", "tour", "deal", "all inclusive",
  "transport", "flight", "train", "bus", "shuttle", "accommodation", "hotel", "Airbnb",
  "lodging", "price", "rate", "quote", "budget", "activity", "around",
   "festival", "evento", "m√∫sica", "concierto", "programaci√≥n", "cartel",
  "espect√°culo", "entrada", "precio", "pase", "fiesta", "artista", "techno", "rock",
  "jazz", "electr√≥nica", "pop", "cl√°sica", "cine", "escenario", "en vivo", "feria",
  "sal√≥n", "al aire libre", "evento cultural", "fin de semana festivo",
  "estancia", "viaje", "pack", "paquete", "circuito", "oferta", "todo incluido",
  "transporte", "vuelo", "tren", "autob√∫s", "lanzadera", "alojamiento", "hotel", "Airbnb",
  "hospedaje", "precio", "tarifa", "presupuesto", "presupuesto", "actividad", "alrededor"
  ];
  return keywords.some(k => message.toLowerCase().includes(k));
}

async function queryAirtable() {
  const url = `https://api.airtable.com/v0/${process.env.AIRTABLE_BASE_ID}/${process.env.AIRTABLE_TABLE_NAME}`;
  try {
    const response = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${process.env.AIRTABLE_API_KEY}`
      }
    });
    return response.data.records;
  } catch (error) {
    console.error("Erreur Airtable:", error.response?.status, error.response?.data);
    throw error;
  }
}

async function generateSearchQuery(userMessage) {
  const prompt = [
    {
      role: 'system',
      content: `Tu aides √† formuler une requ√™te Google tr√®s cibl√©e pour chercher :
- des offres de festival (billets, logement, transport)
- des packs tout compris ou infos pratiques
Ne r√©ponds que par la requ√™te.`
    },
    {
      role: 'user',
      content: `Formule une requ√™te Google √† partir de : "${userMessage}"`
    }
  ];

  const completion = await openai.chat.completions.create({
    model: 'gpt-4.1',
    messages: prompt
  });

  return completion.choices[0].message.content.trim();
}

async function searchWeb(query) {
  return new Promise((resolve) => {
    getJson({
      engine: "google",
      q: query,
      api_key: process.env.SERPAPI_KEY,
    }, (data) => {
      if (data && data.organic_results) {
        const results = data.organic_results.slice(0, 3)
          .map(r => `${r.title}: ${r.snippet}`)
          .join('\n');
        resolve(results);
      } else {
        resolve("Aucune information trouv√©e sur le web.");
      }
    });
  });
}

app.post('/chat', async (req, res) => {
  const { message: userMessage, sessionId, lang = 'fr'} = req.body;
  if (!sessionId) return res.status(400).json({ error: "Session ID manquant." });

  if (userMessage.toLowerCase().trim() === 'reset') {
    userHistories[sessionId] = [
      {
        role: 'system',
        content: `Tu es un assistant expert en festivals. Tu r√©ponds uniquement aux questions concernant :\n- les festivals (musique, culture, cin√©ma, etc.)\n- les activit√©s √† faire autour (visites, transport, logement, tourisme)\nUtilise les donn√©es suivantes et reformule avec un ton fluide.`
      }
    ];
    return res.json({ reply: "La conversation a √©t√© r√©initialis√©e." });
  }

  if (!userHistories[sessionId]) {
    userHistories[sessionId] = [
      {
        role: 'system',
        content: `Tu es un assistant expert en festivals. Tu r√©ponds uniquement aux questions concernant :\n- les festivals (musique, culture, cin√©ma, etc.)\n- les activit√©s √† faire autour (visites, transport, logement, tourisme)\nUtilise les donn√©es suivantes et reformule avec un ton fluide.`
      }
    ];
  }

  if (!isFestivalRelated(userMessage)) {
    return res.json({ reply: "Je suis un assistant sp√©cialis√© dans les festivals. Je ne peux pas r√©pondre √† cette question." });
  }

  try {
    const records = await queryAirtable();

    const formattedData = records.map(record => {
      const fields = record.fields;
      return `Festival "${fields.Nom}" √† ${fields.Lieu}, le ${fields.Date}. Activit√©s pr√©vues : ${fields.Activites || 'non renseign√©es'}.`;
    }).join("\n");

    const matchedFestival = findFestivalMatch(userMessage, records);

    const searchQuery = await generateSearchQuery(userMessage);
    const webResults = await searchWeb(searchQuery);

    userHistories[sessionId].push({ role: 'user', content: userMessage });
    let intro = "";
if (lang === "en") {
  intro = "You must answer in English.\n";
} else if (lang === "es") {
  intro = "Debes responder en espa√±ol.\n";
} else {
  intro = "Tu dois r√©pondre en fran√ßais.\n";
}
    const systemPrompt = {
      role: 'system',
      content: `
      ${intro}

Voici les donn√©es extraites d'Airtable :
${formattedData}

Et les r√©sultats web :
${webResults}

Si l'utilisateur demande un pack, un devis ou une formule "tout compris", alors :
- Propose un pack estimatif (logement, transport, billet)
- Donne des fourchettes de prix si tu peux
- Appuie-toi sur les r√©sultats web pour citer quelques √©l√©ments
- Adopte un ton de conseiller voyage, rassurant et synth√©tique
Sinon, r√©ponds simplement √† la demande.
`
    };

    const messagesWithContext = [
      userHistories[sessionId][0],
      systemPrompt,
      ...userHistories[sessionId].slice(1)
    ];

    const completion = await openai.chat.completions.create({
      model: 'gpt-4.1',
      messages: messagesWithContext,
    });

    const gptReply = completion.choices[0].message.content;
    userHistories[sessionId].push({ role: 'assistant', content: gptReply });

    const history = userHistories[sessionId];
    const systemMessage = history[0];
    const recentExchanges = history.slice(1).slice(-20);
    userHistories[sessionId] = [systemMessage, ...recentExchanges];

    res.json({ reply: gptReply });
  } catch (error) {
    console.error("üí• Erreur serveur :", error.message);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
});

app.post('/generate-quote', async (req, res) => {
  const { sessionId, prenom, email, ville } = req.body;
  const history = userHistories[sessionId];

  if (!history) return res.status(400).json({ success: false, error: "Pas de conversation active." });

  const lastUserMsg = history.slice().reverse().find(m => m.role === 'user')?.content || '';
  const lastGptReply = history.slice().reverse().find(m => m.role === 'assistant')?.content || '';

  const extractPrompt = [
    {
      role: 'system',
      content: `Tu extrais ces infos d'un √©change : "Style musical", "Budget", "Dates", "Festival propos√©". Retourne-les dans ce format JSON :
Ta r√©ponse **doit √™tre uniquement un JSON brut**, sans balises Markdown, sans \`\`\`, sans texte autour. Pas d‚Äôexplication, pas de phrase avant ou apr√®s.
Exemple de format attendu :
{
  "Style musical": "String",
  "Budget": Number,
  "Dates": "String",
  "Festival propos√©": "String"
}

Remplis Festival propos√© m√™me si cela n'est pas sp√©cifier avec un vrai festival . M√™me chose pour le budget, aucune valeur ne doit etre vide.`
    },
    {
      role: 'user',
      content: `Message : "${lastUserMsg}"\nR√©ponse : "${lastGptReply}"`
    }
  ];

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4.1",
      messages: extractPrompt,
      temperature: 0.3
    });

    const gptJson = JSON.parse(completion.choices[0].message.content.trim());

    const fullJson = {
      'Pr√©nom': prenom,
      'Email': email,
      'Ville de d√©part': ville,
      ...gptJson
    };
    console.log("Devis envoy√© √† n8n :", JSON.stringify(fullJson, null, 2));
    await axios.post(process.env.WEBHOOK_URL, fullJson, {
      headers: { "Content-Type": "application/json" }
      
    });
    
    console.log("Devis envoy√© √† n8n :", fullJson);
    res.json({ success: true, data: fullJson });
  } catch (e) {
    
  }
});



const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Serveur lanc√© sur le port ${PORT}`);
});
